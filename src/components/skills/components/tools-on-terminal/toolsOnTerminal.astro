---
import TerminalIcon from '../../atoms/terminal-icon/TerminalIcon.astro';
import Terminal from '../terminal/Terminal.astro';
import './tools-on-terminal.css';

const base = import.meta.env.BASE_URL;
---

<Terminal nombre="joyH">
    <div class="terminal__tools">
        <h2>Outils & Logiciels</h2>
        <div class="tools-carousel">
            <button class="carousel-btn carousel-btn--prev" aria-label="Précédent">
                <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M15 18L9 12L15 6"/>
                </svg>
            </button>
            
            <div class="tools-carousel__viewport">
                <div class="terminal__tools__container">
                    <TerminalIcon src={`${base}assets/ubuntu.svg`} color="#F76B15" name="Ubuntu" />
                    <TerminalIcon src={`${base}assets/windows.svg`} color="#3EC5EE" name="Windows" />
                    <TerminalIcon src={`${base}assets/vscode.svg`} color="#00A5ED" name="VS Code" />
                    <TerminalIcon src={`${base}assets/copilot.svg`} color="#FCFCFC" name="Copilot" />
                    <TerminalIcon src={`${base}assets/word.svg`} color="#0090FF" name="Word" />
                    <TerminalIcon src={`${base}assets/excel.svg`} color="#3DD68C" name="Excel" />
                    <TerminalIcon src={`${base}assets/chatGPT.svg`} color="#FBFEFD" name="ChatGPT" />
                    <TerminalIcon src={`${base}assets/vmware.svg`} color="#EB8600" name="VMware" />
                    <TerminalIcon src={`${base}assets/github.svg`} color="#E8E8E8" name="Github" />
                    <TerminalIcon src={`${base}assets/postman.svg`} color="#F76836" name="Postman" />
                    <TerminalIcon src={`${base}assets/swagger.svg`} color="#77E44A" name="Swagger" />
                    <TerminalIcon src={`${base}assets/figma.svg`} color="#F76E5E" name="Figma" />
                    <TerminalIcon src={`${base}assets/photoshop.svg`} color="#00C1F7" name="Photoshop" />
                    <TerminalIcon src={`${base}assets/trello.svg`} color="#1C80F4" name="Trello" />
                    <TerminalIcon src={`${base}assets/notion.svg`} color="#FCFCFC" name="Notion" />

                </div>
            </div>

            <button class="carousel-btn carousel-btn--next" aria-label="Suivant">
                <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M9 18L15 12L9 6"/>
                </svg>
            </button>
        </div>
    </div>
</Terminal>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const container = document.querySelector('.terminal__tools__container') as HTMLElement;
        const prevBtn = document.querySelector('.tools-carousel .carousel-btn--prev') as HTMLButtonElement;
        const nextBtn = document.querySelector('.tools-carousel .carousel-btn--next') as HTMLButtonElement;
        
        if (!container || !prevBtn || !nextBtn) return;
        
        // Largeur d'un élément (95px) + gap (15px) = 110px
        const scrollAmount = 110;
        let autoScrollInterval: ReturnType<typeof setInterval> | null = null;
        let isScrollingToEnd = true; // Direction du défilement automatique
        
        // Fonctions de défilement manuel
        prevBtn.addEventListener('click', () => {
            stopAutoScroll(); // Arrêter le défilement auto quand l'utilisateur interagit
            container.scrollBy({
                left: -scrollAmount,
                behavior: 'smooth'
            });
        });
        
        nextBtn.addEventListener('click', () => {
            stopAutoScroll(); // Arrêter le défilement auto quand l'utilisateur interagit
            container.scrollBy({
                left: scrollAmount,
                behavior: 'smooth'
            });
        });
        
        // Défilement automatique
        function startAutoScroll() {
            if (autoScrollInterval) return; // Éviter les doublons
            
            autoScrollInterval = setInterval(() => {
                const { scrollLeft, scrollWidth, clientWidth } = container;
                
                if (isScrollingToEnd) {
                    // Défiler vers la droite
                    if (scrollLeft >= scrollWidth - clientWidth) {
                        // On a atteint la fin, inverser la direction
                        isScrollingToEnd = false;
                    } else {
                        container.scrollBy({
                            left: scrollAmount,
                            behavior: 'smooth'
                        });
                    }
                } else {
                    // Défiler vers la gauche
                    if (scrollLeft <= 0) {
                        // On a atteint le début, inverser la direction
                        isScrollingToEnd = true;
                    } else {
                        container.scrollBy({
                            left: -scrollAmount,
                            behavior: 'smooth'
                        });
                    }
                }
            }, 2000); // Défilement toutes les 2 secondes
        }
        
        function stopAutoScroll() {
            if (autoScrollInterval) {
                clearInterval(autoScrollInterval);
                autoScrollInterval = null;
            }
        }
        
        // Événements de survol sur le container
        container.addEventListener('mouseenter', startAutoScroll);
        container.addEventListener('mouseleave', stopAutoScroll);
        
        // Arrêter le défilement auto quand l'utilisateur fait défiler manuellement
        container.addEventListener('wheel', stopAutoScroll);
        container.addEventListener('touchstart', stopAutoScroll);
        
        // Masquer les boutons si pas besoin de scroll
        function updateButtons() {
            const { scrollLeft, scrollWidth, clientWidth } = container;
            prevBtn.style.opacity = scrollLeft <= 0 ? '0.5' : '1';
            nextBtn.style.opacity = scrollLeft >= scrollWidth - clientWidth ? '0.5' : '1';
        }
        
        container.addEventListener('scroll', updateButtons);
        updateButtons(); // Initial check
    });
</script>
